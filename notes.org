#+title: Notes

* Character Selection Screen
** Notable Bytes
- $1B40: Player One selected character
- $1B80: Player Two selected character
- $5C-$5D: Current frame input player one
- $5E-$5F: Current frame input player two
- $60-$61: New button presses player one
- $62-$63: New button presses player two
  $8a -> this is the current screen
  $8d -> the submenu (eg. $8a of 2 is CSS, 8D of 1 is vs, 2 vs cpu, 4 practice)
  $7e2000 -> the beginning of RAM and also where CHR data seems to be copied

** Character Codes
| Character | Value |
|-----------+-------|
| Moon      | $1    |
| Mercury   | $2    |
| Mars      | $3    |
| Jupiter   | $4    |
| Venus     | $5    |
| Uranus    | $6    |
| Neptune   | $7    |
| Pluto     | $8    |
| Chibi     | $9    |

** Notable Functions
- CSS_UPDATE_P1_CHAR
  On the CSS Screen, reads player one movement and sets the character code P1 is set to. Uses Character Selection Grid.
- C0EBFB handles sending audio data to APU.

* C0 Databanks
- Character Selection Grid
  Roughly C0AA51 - C0AA74
  4 byte chunks for each character. The chunks are:
  Up Down Left Right.

* Battle
** Notable Bytes
- 000a00 this seems to be one of several mirrored bytes that stores p1's position relative to the left side of the screen. $0 to $80
- $0803/$0804 contain the timer. It is in decimal, second then first
- $1001 seems to be p1 animation, changes based on frame but only when doing something goes up to 1300
  $0b00 looks worth looking into too
- $1d00 is p1 character, $1d03 is p2 character
  $1d02 is p1 character color
- At some point on load of scenes, 54 7f c0 6b 7f 7f 6b gets written to c8. this is a mvn opcode. :O 808dc9 writes to it on load. c01e83 on stage select
  MVN #$7F, #$C0
  RTL
  MVN #$7F, #$7F
  RTL
- Neptune's hand background chunk is at the 40000 point in the rom.
- $80EB8C is the function that swaps music. Pass in a different value to A register to get a different song.
- ECE7 is the stage music section. Multiple entries for one level.
  - e79048: chibi/crystal tokyo evening
  - e74225/e7b2c3: moon: Silver castle
  - e77421: space-time pluto
  - e788b1 e7be64: seaside port neptune
  - e74d65: mercury/fountain day
  - e760db e7a521: gamecenter/jupiter
  - e7582d e7b2c3: rei/shrine
  - e76a15 e7a521: venus/crystal tokyo night
  - e77f56 e7a521: fountain night/uranus

  JSR in instruction C3867c step over caused gong and tile viewer update
  83869A caused color palette update

  digging into one of the title screen updates, 80a23b is when we see it happen, but it was likely set before that as 80a21f onwards I see it manipulating data in $00 that I think it uses
  by the end of the function call at 80a278, it's updated the tileset to point at 4000 and is what we would expect it to look like. So The functions starting at 80a214 are our best bet to investigate further.

  - Potential breakpoints:
    83832E tiles load in this
    80A23B the start of the function where tiles load and then are corrected
    80A0DE top level, each time it runs we see a demo above and it reloads things

    4280 contains the beginning of the copyright part of the tilemap on title screen
    47a20 contains the top of chibi's head....so different places

    2180 set for BBAD1
    AT1 set to 808192
    DMAP1 set to 8 (decrement A bus address after copy) WRAM copy
    000808 is s-wram address
    1FEC
    8381D6
* How I did it
** Silent mode
- Change two values:
  $80E401 and $80E1CE
  change these from A5 A2 to A9 01
  LDA #A2 -> LDA #$01
  (1 is no music in the music switcher)
